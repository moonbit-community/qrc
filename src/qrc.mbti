// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/qrc"

// Values
fn apply_error_correction(Array[Int], Mode, Int, ErrorCorrectionLevel) -> Array[Int]

fn detect_mode(String) -> Mode

fn encode(String) -> QRCode

fn encode_alphanumeric(String) -> Array[Int]

fn encode_byte(String) -> Array[Int]

fn encode_data(String, Mode) -> Array[Int]

fn encode_numeric(String) -> Array[Int]

fn encode_with_ec(String, ErrorCorrectionLevel) -> QRCode

fn encode_with_mode_and_ec(String, Mode, Int, ErrorCorrectionLevel) -> QRCode

fn generate_qr(String, ErrorCorrectionLevel) -> QRCode

fn get_error_correction_codewords(Int, ErrorCorrectionLevel) -> Int

fn get_module(Matrix, Int, Int) -> Module

fn gf_div(Int, Int) -> Int

fn gf_mul(Int, Int) -> Int

fn init_matrix(Int) -> Matrix

fn make_byte_mode() -> Mode

fn make_ec_level_h() -> ErrorCorrectionLevel

fn make_ec_level_l() -> ErrorCorrectionLevel

fn make_ec_level_m() -> ErrorCorrectionLevel

fn make_ec_level_q() -> ErrorCorrectionLevel

fn make_kanji_mode() -> Mode

fn new_matrix(Int) -> Matrix

fn set_module(Matrix, Int, Int, Module) -> Unit

fn version_to_size(Int) -> Int

// Errors

// Types and methods
pub enum ErrorCorrectionLevel {
  L
  M
  Q
  H
}
impl Eq for ErrorCorrectionLevel

pub struct Matrix {
  size : Int
  modules : Array[Array[Module]]
}

pub enum Mode {
  Numeric
  Alphanumeric
  Byte
  Kanji
}
impl Eq for Mode

pub enum Module {
  Light
  Dark
}
impl Eq for Module

pub struct QRCode {
  version : Int
  error_correction : ErrorCorrectionLevel
  mode : Mode
  data : String
  matrix : Matrix
}

// Type aliases
pub typealias Int as Version

// Traits

